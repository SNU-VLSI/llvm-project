//===-- IMCEISelDAGToDAG.cpp - A dag to dag inst
// selector for IMCE --------===//
//
// Part of the LLVM Project, under the Apache License
// v2.0 with LLVM Exceptions. See
// https://llvm.org/LICENSE.txt for license information.
// SPDX-License-Identifier: Apache-2.0 WITH
// LLVM-exception
//
//===----------------------------------------------------------------------===//
//
// This file defines an instruction selector for the
// IMCE target.
//
//===----------------------------------------------------------------------===//

#include "IMCE.h"
#include "IMCETargetMachine.h"
#include "MCTargetDesc/IMCEMCTargetDesc.h"
#include "llvm/CodeGen/SelectionDAGISel.h"
#include "llvm/Pass.h"
#include "llvm/Support/Debug.h"

using namespace llvm;

#define DEBUG_TYPE "IMCE-isel"
#define PASS_NAME "IMCE DAG->DAG Pattern Instruction Selection"

namespace {

class IMCEDAGToDAGISel : public SelectionDAGISel {
public:
  static char ID;

  IMCEDAGToDAGISel(IMCETargetMachine &TM, CodeGenOpt::Level OptLevel)
      : SelectionDAGISel(ID, TM, OptLevel) {}

  // Override SelectionDAGISel.
  void Select(SDNode *Node) override;

// Include the pieces autogenerated from the target
// description.
#include "IMCEGenDAGISel.inc"
};
} // end anonymous namespace

char IMCEDAGToDAGISel::ID = 0;

INITIALIZE_PASS(IMCEDAGToDAGISel, DEBUG_TYPE, PASS_NAME, false, false)

FunctionPass *llvm::createIMCEISelDag(IMCETargetMachine &TM, CodeGenOpt::Level OptLevel) {
  return new IMCEDAGToDAGISel(TM, OptLevel);
}

void IMCEDAGToDAGISel::Select(SDNode *Node) {
  // Instruction Selection not handled by the
  // auto-generated tablegen selection should be handled
  // here.

  // Select the default instruction.
  SelectCode(Node);
}
