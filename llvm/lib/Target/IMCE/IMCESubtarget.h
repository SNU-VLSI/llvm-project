//===-- IMCESubtarget.h - Define Subtarget for IMCE -------------*- C++ -*-===//
//
// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
// See https://llvm.org/LICENSE.txt for license information.
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
//
//===----------------------------------------------------------------------===//
//
// This file declares the IMCE specific subclass of TargetSubtargetInfo.
//
//===----------------------------------------------------------------------===//

#ifndef LLVM_LIB_TARGET_IMCE_IMCESUBTARGET_H
#define LLVM_LIB_TARGET_IMCE_IMCESUBTARGET_H

#include "IMCEFrameLowering.h"
#include "IMCEISelLowering.h"
#include "IMCEInstrInfo.h"
#include "IMCERegisterInfo.h"
#include "llvm/CodeGen/GlobalISel/CallLowering.h"
#include "llvm/CodeGen/GlobalISel/InstructionSelector.h"
#include "llvm/CodeGen/GlobalISel/LegalizerInfo.h"
#include "llvm/CodeGen/RegisterBankInfo.h"
#include "llvm/CodeGen/TargetFrameLowering.h"
#include "llvm/CodeGen/TargetSubtargetInfo.h"
#include "llvm/IR/DataLayout.h"
#include <string>

#define GET_SUBTARGETINFO_HEADER
#include "IMCEGenSubtargetInfo.inc"

namespace llvm {
class StringRef;
class TargetMachine;

class IMCESubtarget : public IMCEGenSubtargetInfo {
  virtual void anchor();

  IMCEInstrInfo InstrInfo;
  IMCETargetLowering TLInfo;
  IMCEFrameLowering FrameLowering;

  // GlobalISel related APIs.
  std::unique_ptr<CallLowering> CallLoweringInfo;
  std::unique_ptr<LegalizerInfo> Legalizer;
  std::unique_ptr<RegisterBankInfo> RegBankInfo;
  std::unique_ptr<InstructionSelector> InstSelector;

public:
  IMCESubtarget(const Triple &TT, const std::string &CPU, const std::string &FS,
                const TargetMachine &TM);

// Getters for SubtargetFeatures defined in tablegen
#define GET_SUBTARGETINFO_MACRO(ATTRIBUTE, DEFAULT, GETTER)                                        \
  bool GETTER() const { return ATTRIBUTE; }
#include "IMCEGenSubtargetInfo.inc"

  // Automatically generated by tblgen.
  void ParseSubtargetFeatures(StringRef CPU, StringRef TuneCPU, StringRef FS);

  const TargetFrameLowering *getFrameLowering() const override { return &FrameLowering; }
  const IMCEInstrInfo *getInstrInfo() const override { return &InstrInfo; }
  const IMCERegisterInfo *getRegisterInfo() const override { return &InstrInfo.getRegisterInfo(); }
  const IMCETargetLowering *getTargetLowering() const override { return &TLInfo; }

  // GlobalISEL
  const CallLowering *getCallLowering() const override { return CallLoweringInfo.get(); }

  const RegisterBankInfo *getRegBankInfo() const override { return RegBankInfo.get(); }

  const LegalizerInfo *getLegalizerInfo() const override { return Legalizer.get(); }

  InstructionSelector *getInstructionSelector() const override { return InstSelector.get(); }
};

} // end namespace llvm

#endif
